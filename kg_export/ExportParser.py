import sys
import os

if os.getcwd() not in sys.path:
    sys.path.append(os.getcwd())

import argparse
import uuid
from kg_export.json_to_csv import JsonToCsv
from kg_export.csv_to_json import CsvToJson
from kg_export.log.Logger import Logger

logger = Logger()

if __name__ == '__main__':
    request_id = str(uuid.uuid4())
    parser = argparse.ArgumentParser()
    logger.info('\n\n New parse request with request_id - {}'.format(request_id))
    parser.add_argument('--input_file_path', '--i', type=str, help='\t\t path for input file csv/json file', metavar='')
    parser.add_argument('--type', '--t', type=str, help='\t\t types supported are json_to_csv and csv_to_json', metavar='')
    parser.add_argument('--output_file_path', '--o', type=str, help='\t\t path for output csv/json file generated by ExportParser tool', metavar='')

    input_arguments = parser.parse_args()

    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        exit(1)

    args = dict()
    args['request_type'] = input_arguments.type
    args['input_file_path'] = input_arguments.input_file_path
    args['output_file_path'] = input_arguments.output_file_path
    print('\n\n New parse request with request_id - {}'.format(request_id))
    if args.get('request_type', '').strip() == 'json_to_csv':
        parser = JsonToCsv()
        logger.info('Initiated kg export json parsing')
        parser.parse(args['input_file_path'], args['output_file_path'])
    elif args.get('request_type', '').strip() == 'csv_to_json':
        parser = CsvToJson()
        parser.parse(args['input_file_path'], args['output_file_path'])
    else:
        print('invalid request_type - {}'.format(args.get('request_type', '')))
